#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    ControlRGB_BRI: ControlRGB_BRI {
        compatible = "zmk,behavior-sensor-rotate";
        label = "CONTROLRGB_BRI";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    caps_multi: caps_multi {
        compatible = "zmk,behavior-tap-dance";
        label = "CAPS_MULTI";
        #binding-cells = <0>;
        bindings = <&caps_word>, <&kp CAPSLOCK>;
    };

    td_layer1: td_layer1 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER1";
        #binding-cells = <0>;
        bindings = <&lt 1 SPACE>, <&kp SPACE>;
    };

    td_layer2: td_layer2 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER2";
        #binding-cells = <0>;
        bindings = <&lt 2 ESCAPE>, <&kp ESCAPE>;
    };

    td_layer3: td_layer3 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER3";
        #binding-cells = <0>;
        bindings = <&lt 3 ENTER>, <&kp ENTER>;
    };

    td_layer4: td_layer4 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER4";
        #binding-cells = <0>;
        bindings = <&lt 4 BACKSPACE>, <&kp BACKSPACE>;
    };

    td_del: td_del {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_DEL";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_SHIFT DELETE>, <&kp DELETE>;

        tapping-term-ms = <180>;
    };

    timeless_homerow_left: timeless_homerow_left {
        compatible = "zmk,behavior-hold-tap";
        label = "TIMELESS_HOMEROW_LEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        quick-tap-ms = <168>;
        require-prior-idle-ms = <145>;
        hold-trigger-key-positions = <1 2 3 4 5 14 15 16 17 18 27 28 29 30 31 40 41 42 43 44 0 13 26 39 53 54 55 56 57 59 60 61 62 63>;
        hold-trigger-on-release;
    };

    timeless_homerow_right: timeless_homerow_right {
        compatible = "zmk,behavior-hold-tap";
        label = "TIMELESS_HOMEROW_RIGHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        quick-tap-ms = <168>;
        require-prior-idle-ms = <145>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <53 54 55 56 57 59 60 61 62 63 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 59 60 61 62 63>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        left_sys {
            bindings = <&bootloader>;
            key-positions = <0 57 1>;
        };

        right_sys {
            bindings = <&bootloader>;
            key-positions = <11 12 59>;
        };

        left_rst {
            bindings = <&sys_reset>;
            key-positions = <0 5 57>;
        };

        right_rst {
            bindings = <&sys_reset>;
            key-positions = <59 12 7>;
        };

        jk_altgr {
            bindings = <&kp RALT>;
            key-positions = <34 35>;
        };

        brace_s {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <46 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp GRAVE    &kp N1    &kp N2                          &kp N3                         &kp N4                         &kp N5        &kp UP_ARROW     &kp N6      &kp N7                          &kp N8                          &kp N9                           &kp N0     &tog 5
&caps_multi  &kp Q     &kp W                           &kp E                          &kp R                          &kp T         &kp DOWN_ARROW   &kp Y       &kp U                           &kp I                           &kp O                            &kp P      &kp BSLH
&kp LCTRL    &kp A     &timeless_homerow_left LCTRL S  &timeless_homerow_left LALT D  &timeless_homerow_left LGUI F  &kp G         &kp LEFT_ARROW   &kp H       &timeless_homerow_right LGUI J  &timeless_homerow_right LALT K  &timeless_homerow_right LCTRL L  &kp SEMI   &kp APOS
&kp LSHIFT   &kp Z     &kp X                           &kp C                          &kp V                          &kp B         &kp RIGHT_ARROW  &kp N       &kp M                           &kp COMMA                       &kp DOT                          &kp FSLH   &kp LEFT_SHIFT
&kp C_MUTE   &kp LALT  &kp LGUI                        &mt LSHFT TAB                  &td_layer1                     &td_layer2    &kp ENTER        &td_layer3  &td_layer4                      &td_del                         &kp RALT                         &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        navigation {
            bindings = <
&trans  &trans      &trans     &trans      &trans       &trans        &trans  &trans      &trans       &trans      &trans     &trans      &trans
&trans  &kp INSERT  &kp HOME   &kp UP      &kp END      &kp PG_UP     &trans  &kp INSERT  &kp HOME     &kp PG_DN   &kp PG_UP  &kp END     &trans
&trans  &kp DELETE  &kp LEFT   &kp DOWN    &kp RIGHT    &kp PG_DN     &trans  &kp DELETE  &kp LEFT     &kp DOWN    &kp UP     &kp RIGHT   &trans
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &trans  &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO  &trans
&trans  &trans      &trans     &trans      &trans       &trans        &trans  &trans      &trans       &trans      &trans     &trans
            >;
        };

        function {
            bindings = <
&trans  &trans      &trans     &trans    &trans    &trans       &trans  &kp PRINTSCREEN  &kp SCROLLLOCK     &kp PAUSE_BREAK  &kp F11     &kp F12    &trans
&trans  &kp F1      &kp F2     &kp F3    &kp F4    &kp F5       &trans  &kp F6           &kp F7             &kp F8           &kp F9      &kp F10    &trans
&trans  &kp LSHFT   &kp LCTRL  &kp LALT  &kp LGUI  &kp PG_UP    &trans  &kp PG_UP        &kp LGUI           &kp LALT         &kp LCTRL   &kp LSHFT  &trans
&trans  &kp INSERT  &kp DEL    &kp HOME  &kp END   &kp PG_DN    &trans  &kp PG_DN        &kp HOME           &kp END          &kp INSERT  &kp DEL    &trans
&trans  &trans      &trans     &trans    &trans    &trans       &trans  &tog 5           &kp K_APPLICATION  &trans           &trans      &trans
            >;
        };

        media {
            bindings = <
&bt BT_CLR  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &trans  &rgb_ug RGB_ON   &rgb_ug RGB_EFR     &rgb_ug RGB_HUI    &rgb_ug RGB_SAI  &rgb_ug RGB_BRI   &rgb_ug RGB_SPI
&trans      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &trans  &rgb_ug RGB_OFF  &rgb_ug RGB_EFF     &rgb_ug RGB_HUD    &rgb_ug RGB_SAD  &rgb_ug RGB_BRD   &rgb_ug RGB_SPD
&trans      &trans         &kp LCTRL      &kp LALT       &kp LGUI       &trans           &trans  &rgb_ug RGB_TOG  &kp C_MUTE          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &trans
&trans      &out OUT_BLE   &out OUT_USB   &trans         &trans         &out OUT_TOG     &trans  &kp C_REWIND     &kp C_FAST_FORWARD  &kp C_PREVIOUS     &kp C_NEXT       &kp C_STOP        &trans
&kp C_MUTE  &trans         &trans         &trans         &trans         &trans           &trans  &trans           &trans              &trans             &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        symbol {
            bindings = <
&trans  &trans           &trans             &trans           &trans                 &trans         &trans  &trans     &trans          &trans        &trans                &trans                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN        &kp POUND        &kp DOLLAR             &kp PERCENT    &trans  &kp CARET  &kp AMPERSAND   &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp GRAVE        &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &trans         &trans  &trans     &kp MINUS       &kp EQUAL     &kp FSLH              &kp BSLH               &trans
&trans  &kp TILDE        &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans         &trans  &trans     &kp UNDERSCORE  &kp PLUS      &kp QUESTION          &kp PIPE               &trans
&trans  &trans           &trans             &trans           &trans                 &trans         &trans  &trans     &trans          &trans        &trans                &trans
            >;
        };

        mouse {
            bindings = <
&tog 5  &trans      &trans          &trans          &trans           &tog 5            &mmv MOVE_UP     &trans  &trans    &trans    &trans     &trans     &trans
&trans  &mkp MB5    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP      &mmv MOVE_DOWN   &trans  &trans    &trans    &trans     &trans     &trans
&trans  &mkp MB4    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &mmv MOVE_LEFT   &trans  &kp RALT  &kp RGUI  &kp RSHFT  &kp RCTRL  &trans
&trans  &kp K_UNDO  &kp K_CUT       &kp K_COPY      &kp K_PASTE      &kp K_REDO        &mmv MOVE_RIGHT  &trans  &trans    &trans    &trans     &trans     &trans
&trans  &trans      &trans          &mkp RCLK       &mkp LCLK        &mkp MCLK         &mkp LCLK        &trans  &trans    &trans    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        mouse_layer {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };
};
