#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    ControlRGB_BRI: ControlRGB_BRI {
        compatible = "zmk,behavior-sensor-rotate";
        label = "CONTROLRGB_BRI";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    caps_ht: caps_ht {
        compatible = "zmk,behavior-hold-tap";
        label = "CAPS_HT";
        bindings = <&kp>, <&caps_word>;

        #binding-cells = <2>;
        tapping-term-ms = <180>;
        quick-tap-ms = <150>;
    };

    caps_multi: caps_multi {
        compatible = "zmk,behavior-tap-dance";
        label = "CAPS_MULTI";
        #binding-cells = <0>;
        bindings = <&caps_word>, <&kp CAPSLOCK>;
    };

    td_layer1: td_layer1 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER1";
        #binding-cells = <0>;
        bindings = <&lt 1 LSHIFT>, <&kp LEFT_SHIFT>;
    };

    td_layer2: td_layer2 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER2";
        #binding-cells = <0>;
        bindings = <&lt 2 SPACE>, <&kp SPACE>;
    };

    td_layer3: td_layer3 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER3";
        #binding-cells = <0>;
        bindings = <&lt 3 ESCAPE>, <&kp ESCAPE>;
    };

    td_layer4: td_layer4 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER4";
        #binding-cells = <0>;
        bindings = <&lt 4 ENTER>, <&kp ENTER>;
    };

    td_layer5: td_layer5 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER5";
        #binding-cells = <0>;
        bindings = <&lt 5 SPACE>, <&kp SPACE>;
    };

    td_layer6: td_layer6 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_LAYER6";
        #binding-cells = <0>;
        bindings = <&lt 6 RIGHT_SHIFT>, <&kp RIGHT_SHIFT>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        left_sys {
            bindings = <&bootloader>;
            key-positions = <0 57 1>;
        };

        right_sys {
            bindings = <&bootloader>;
            key-positions = <11 12 59>;
        };

        left_rst {
            bindings = <&sys_reset>;
            key-positions = <0 5 57>;
        };

        right_rst {
            bindings = <&sys_reset>;
            key-positions = <59 12 7>;
        };

        gh_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 33>;
            slow-release;
            layers = <0>;
            timeout-ms = <1500>;
            require-prior-idle-ms = <180>;
        };

        jk_altgr {
            bindings = <&kp RALT>;
            key-positions = <34 35>;
        };

        brace_s {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <46 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp GRAVE      &kp N1    &kp N2    &kp N3      &kp N4      &kp N5        &kp UP_ARROW     &kp N6      &kp N7      &kp N8      &kp N9    &kp N0    &kp DELETE
&kp TAB        &kp Q     &kp W     &kp E       &kp R       &kp T         &kp DOWN_ARROW   &kp Y       &kp U       &kp I       &kp O     &kp P     &kp BSLH
&kp BACKSPACE  &kp A     &kp S     &kp D       &kp F       &kp G         &kp LEFT_ARROW   &kp H       &kp J       &kp K       &kp L     &kp SEMI  &kp APOS
&kp LCTRL      &kp Z     &kp X     &kp C       &kp V       &kp B         &kp RIGHT_ARROW  &kp N       &kp M       &kp COMMA   &kp DOT   &kp FSLH  &kp RCTRL
&kp C_MUTE     &kp LGUI  &kp LALT  &td_layer1  &td_layer2  &td_layer3    &kp ENTER        &td_layer4  &td_layer5  &td_layer6  &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        media {
            bindings = <
&bt BT_CLR  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &trans  &rgb_ug RGB_ON   &rgb_ug RGB_EFR   &rgb_ug RGB_HUI     &rgb_ug RGB_SAI    &rgb_ug RGB_BRI  &rgb_ug RGB_SPI
&trans      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &trans  &rgb_ug RGB_OFF  &rgb_ug RGB_EFF   &rgb_ug RGB_HUD     &rgb_ug RGB_SAD    &rgb_ug RGB_BRD  &rgb_ug RGB_SPD
&trans      &kp LALT       &kp LGUI       &kp LSHFT      &kp LCTRL      &trans           &trans  &rgb_ug RGB_TOG  &kp C_NEXT        &kp C_FAST_FORWARD  &kp C_VOLUME_UP    &trans           &trans
&trans      &out OUT_BLE   &out OUT_USB   &trans         &trans         &out OUT_TOG     &trans  &trans           &kp C_PREVIOUS    &kp C_REWIND        &kp C_VOLUME_DOWN  &trans           &trans
&trans      &trans         &trans         &trans         &trans         &trans           &trans  &kp C_STOP       &kp C_PLAY_PAUSE  &kp C_MUTE          &trans             &trans
            >;
        };

        function {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp F11   &kp F12   &trans
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5    &trans  &kp F6           &kp F7          &kp F8           &kp F9    &kp F10   &trans
&trans  &kp LALT  &kp LGUI  &kp LSHFT  &kp LCTRL  &trans    &trans  &trans           &kp LCTRL       &kp LSHFT        &kp LGUI  &kp LALT  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &trans           &trans          &trans           &trans    &trans    &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &trans           &trans          &trans           &trans    &trans
            >;
        };

        system {
            bindings = <
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans          &trans          &trans           &trans          &trans        &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP    &mkp MB5      &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &mkp MB4      &trans  &trans  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI  &trans
&trans  &kp K_UNDO      &kp K_CUT       &kp K_COPY       &kp K_PASTE     &kp K_REDO    &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans          &trans          &mkp RCLK        &mkp LCLK       &mkp MCLK     &trans  &trans  &trans     &trans     &trans    &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        symbol {
            bindings = <
&trans     &trans           &trans             &trans           &trans                 &trans         &trans  &trans     &trans         &trans          &trans                &trans                 &trans
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN        &kp POUND        &kp DOLLAR             &kp PERCENT    &trans  &kp CARET  &kp AMPERSAND  &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&trans     &trans           &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &trans         &trans  &trans     &kp MINUS      &kp UNDERSCORE  &kp EQUAL             &kp PLUS               &trans
&trans     &trans           &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans         &trans  &trans     &trans         &trans          &trans                &trans                 &trans
&trans     &trans           &trans             &trans           &trans                 &trans         &trans  &trans     &trans         &trans          &trans                &trans
            >;
        };

        navigation {
            bindings = <
&trans      &trans      &trans     &trans      &trans       &trans        &trans  &trans       &trans       &trans      &trans     &trans      &trans
&kp INSERT  &kp HOME    &kp UP     &kp END     &kp PG_UP    &trans        &trans  &kp INSERT   &kp HOME     &kp PG_DN   &kp PG_UP  &kp END     &trans
&trans      &kp LEFT    &kp DOWN   &kp RIGHT   &kp PG_DN    &trans        &trans  &caps_multi  &kp LEFT     &kp DOWN    &kp UP     &kp RIGHT   &trans
&trans      &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &trans  &kp K_REDO   &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO  &trans
&trans      &trans      &trans     &trans      &trans       &trans        &trans  &trans       &trans       &trans      &trans     &trans
            >;
        };
    };
};
